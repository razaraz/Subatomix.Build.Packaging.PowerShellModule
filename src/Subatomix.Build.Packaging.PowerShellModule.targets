<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Copyright 2021 Subatomix Research, Inc.

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

  <!--
    This file makes 'dotnet pack' and the Pack command in Visual Studio
    produce a PowerShell module nupkg suitable for publishing in a repository.

    REFERENCES

    Common MSBuild project properties
    https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties

    MSBuild well-known item metadata
    https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata

    Item functions
    https://docs.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2019

    NuGet pack and restore as MSBuild targets
    https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets (specifically, #targetsfortfmspecificcontentinpackage)
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.props
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets

    ResolveToolPackagePaths task
    https://github.com/dotnet/sdk/blob/v3.1.404/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets
    https://github.com/dotnet/sdk/blob/v3.1.404/src/Tasks/Microsoft.NET.Build.Tasks/ResolveToolPackagePaths.cs
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/ResolveToolPackagePaths.cs

    ResolvedFileToPublish property
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets

    Up-to-date check
    https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md
    https://github.com/dotnet/project-system/blob/main/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets
  -->

  <PropertyGroup>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <ContentTargetFolders>.</ContentTargetFolders>
    <CoreBuildDependsOn>
      GeneratePsd1;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>
    <TargetsForTfmSpecificContentInPackage>
      $(TargetsForTfmSpecificContentInPackage);
      ConfigurePackModule
    </TargetsForTfmSpecificContentInPackage>
    <ConfigurePackModuleDependsOn>
      ConfigurePackDepsFile;<!-- .NET Core 3.1 SDK and earlier -->
      ConfigurePackPublishedFile;
      $(ConfigurePackModuleDependsOn)
    </ConfigurePackModuleDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <NoWarn>$(NoWarn);NU5100;NU5110;NU5111</NoWarn>
    <!--
      NU5100: The assembly '...' is not inside the 'lib' folder and hence it
              won't be added as a reference when the package is installed into
              a project. Move it into the 'lib' folder if it needs to be
              referenced.

      NU5110: The script file '...' is outside the 'tools' folder and hence
              will not be executed during installation of this package. Move
              it into the 'tools' folder.

      NU5111: The script file '...' is not recognized by NuGet and hence will
              not be executed during installation of this package. Rename it
              to install.ps1, uninstall.ps1 or init.ps1 and place it directly
              under 'tools'.
    -->
  </PropertyGroup>

  <ItemGroup>
    <!-- Define the Psd1Template item type -->
    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)Psd1Template.xml" />

    <!-- Set the target used to build Psd1Template items -->
    <AvailableItemName Include="Psd1Template" Targets="GeneratePsd1" />
  </ItemGroup>

  <!-- Default CopyToOutputDirectory behavior -->
  <ItemDefinitionGroup>
    <None CopyToOutputDirectory="PreserveNewest" />
    <Psd1Template CopyToOutputDirectory="Never" />
  </ItemDefinitionGroup>

  <ItemGroup>
    <!-- Do not include the Properties directory in build output or package -->
    <None Update="Properties\**" CopyToOutputDirectory="Never" />

    <!-- .psd1.t files should be Psd1Template items, not None items -->
    <None Remove="**\*.psd1.t" />

    <!-- Include .psd1.t files as Psd1Template items -->
    <Psd1Template Include="**\*.psd1.t" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" />
  </ItemGroup>

  <!-- Trigger rebuild if output .psd1 files are missing or outdated -->
  <Target Name="Psd1CollectUpToDateCheckBuiltDesignTime" BeforeTargets="CollectUpToDateCheckBuiltDesignTime" >
    <ItemGroup>
      <UpToDateCheckBuilt Include="$(OutDir)%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)">
        <Original>%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)%(Psd1Template.Extension)</Original>
      </UpToDateCheckBuilt>
    </ItemGroup>
  </Target>

  <Target Name="GeneratePsd1" BeforeTargets="AssignTargetPaths" Condition="'$(DesignTimeBuild)' != 'true'"
          Inputs="@(Psd1Template)" Outputs="@(Psd1Template->'$(OutDir)%(RecursiveDir)%(Filename)')">
    <WriteLinesToFile
      File="$(OutDir)%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)"
      Lines="$(
        [System.IO.File]::ReadAllText('%(Psd1Template.FullPath)')
          .Replace(`{VersionPrefix}`, $(VersionPrefix))
          .Replace(`{VersionSuffix}`, $(VersionSuffix))
          .Replace(`{Copyright}`,     $(Copyright))
      )"
      Overwrite="true"
      WriteOnlyWhenDifferent="true"
    />
    <!-- Without Encoding attribute, writes UTF-8-without-BOM. -->
    <ItemGroup>
      <FileWrites Include="$(OutDir)%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)" />
    </ItemGroup>
  </Target>

  <Target Name="CollectPsd1ForPublish" AfterTargets="ComputeResolvedFilesToPublishList">
    <ItemGroup>
      <_Psd1File Include="@(Psd1Template->'$(OutDir)%(RecursiveDir)%(Filename)')">
        <RelativePath>%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)</RelativePath>
      </_Psd1File>
      <ResolvedFileToPublish Include="@(_Psd1File->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(_Psd1File.RelativePath)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

  <Target Name="ConfigurePackModule" DependsOnTargets="$(ConfigurePackModuleDependsOn)" />

  <Target Name="ConfigurePackDepsFile" DependsOnTargets="PublishForPack"
          Condition=" $(NETCoreSdkVersion) &lt; 5.0.0">
    <ItemGroup>
      <_DepsFile Include="$(PublishDepsFilePath)"/>
    </ItemGroup>
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(_DepsFile)">
        <PackagePath></PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="ConfigurePackPublishedFile"
          DependsOnTargets="
            _ConfigurePackPublishedFilesNetCore;
            _ConfigurePackPublishedFilesSinceNet5
          ">
    <ItemGroup>
      <!-- Remove 'tools/all/any/' prefix (length 14) from package paths -->
      <TfmSpecificPackageFile Include="@(_ResolvedFileToPublishWithPackagePath)">
        <PackagePath>$([System.String]::Copy('%(_ResolvedFileToPublishWithPackagePath.PackagePath)').Substring(14))</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="_ConfigurePackPublishedFilesNetCore" DependsOnTargets="PublishForPack"
          Condition=" $(NETCoreSdkVersion) &lt; 5.0.0">
    <ResolveToolPackagePaths ResolvedFileToPublish="@(ResolvedFileToPublish)"
                             PublishDir="$(PublishDir)"
                             TargetFramework="all">
      <Output TaskParameter="ResolvedFileToPublishWithPackagePath"
              ItemName="_ResolvedFileToPublishWithPackagePath" />
    </ResolveToolPackagePaths>
  </Target>

  <Target Name="_ConfigurePackPublishedFilesSinceNet5" DependsOnTargets="PublishForPack"
    Condition=" $(NETCoreSdkVersion) &gt;= 5.0.0">
    <ResolveToolPackagePaths ResolvedFileToPublish="@(ResolvedFileToPublish)"
                             PublishDir="$(PublishDir)"
                             TargetFrameworkMoniker="all">
      <Output TaskParameter="ResolvedFileToPublishWithPackagePath"
              ItemName="_ResolvedFileToPublishWithPackagePath" />
    </ResolveToolPackagePaths>
  </Target>

  <!--
    NOTE: Broken when using Pack target and GeneratePackageOnBuild=true.
          Set GeneratePackageOnBuild=false or use Build target instead.
  -->
  <Target Name="PublishForPack"
          DependsOnTargets="_PublishForPackBuild;_PublishForPackNoBuild"
          Condition="'$(IsPublishable)' == 'true'">
    <Message Importance="High"
             Text="$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))" />
  </Target>

  <Target Name="_PublishForPackBuild"
          DependsOnTargets="_PublishBuildAlternative"
          Condition="'$(GeneratePackageOnBuild)' != 'true' And '$(NoBuild)' != 'true'" />

  <Target Name="_PublishForPackNoBuild"
          DependsOnTargets="$(_PublishNoBuildAlternativeDependsOn)"
          Condition="'$(GeneratePackageOnBuild)' == 'true' Or '$(NoBuild)' == 'true'" />

</Project>
