<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Copyright 2022 Subatomix Research Inc.

    Permission to use, copy, modify, and distribute this software for any
    purpose with or without fee is hereby granted, provided that the above
    copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
    WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
    MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
    ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
    OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

  <!--
    This package makes 'dotnet pack' and the Pack command in Visual Studio
    produce a PowerShell module .nupkg suitable for publishing in a repository.

    Import order:
    | project -> SDK .targets -> NuGet package .targets -> Directory.Build.targets
    |                            ^^^^^^^^^here^^^^^^^^^

    REFERENCES

    Customize your build
    https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build

    Common MSBuild project properties
    https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties

    MSBuild well-known item metadata
    https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata

    Item functions
    https://docs.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2019

    NuGet pack and restore as MSBuild targets
    https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets (specifically, #targetsfortfmspecificcontentinpackage)
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.props
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets

    ResolveToolPackagePaths task
    https://github.com/dotnet/sdk/blob/v3.1.404/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets
    https://github.com/dotnet/sdk/blob/v3.1.404/src/Tasks/Microsoft.NET.Build.Tasks/ResolveToolPackagePaths.cs
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PackTool.targets
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/ResolveToolPackagePaths.cs

    ResolvedFileToPublish property
    https://github.com/dotnet/sdk/blob/main/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets

    Up-to-date check
    https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md
    https://github.com/dotnet/project-system/blob/main/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets
  -->

  <PropertyGroup>
    <IncludeBuildOutput>false</IncludeBuildOutput>

    <!--
      PowerShell modules depend on other PowerShell modules, not on typical
      NuGet packages.  Those module dependencies are specified in .psd1 files
      (aka module manifests).  Dependency DLLs typically ship with the module.
      Thus the .nuspec of the module should not declare any NuGet dependencies.
    -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>

    <!--
      PowerShell module files should appear at the root of the package.
    -->
    <ContentTargetFolders>.</ContentTargetFolders>

    <!--
      Turn off warnings complaining that the module is not structured like a
      typical .NET NuGet package.  They do not apply to PowerShell modules.

      NU5100: The assembly '...' is not inside the 'lib' folder and hence it
              won't be added as a reference when the package is installed into
              a project. Move it into the 'lib' folder if it needs to be
              referenced.

      NU5110: The script file '...' is outside the 'tools' folder and hence
              will not be executed during installation of this package. Move
              it into the 'tools' folder.

      NU5111: The script file '...' is not recognized by NuGet and hence will
              not be executed during installation of this package. Rename it
              to install.ps1, uninstall.ps1 or init.ps1 and place it directly
              under 'tools'.
    -->
    <NoWarn>$(NoWarn);NU5100;NU5110;NU5111</NoWarn>

    <CoreBuildDependsOn>
      GeneratePsd1;
      $(CoreBuildDependsOn)
    </CoreBuildDependsOn>

    <TargetsForTfmSpecificContentInPackage>
      $(TargetsForTfmSpecificContentInPackage);
      ConfigurePackModule
    </TargetsForTfmSpecificContentInPackage>

    <ConfigurePackModuleDependsOn>
      ConfigurePackDepsFile;<!-- .NET Core 3.1 SDK and earlier -->
      ConfigurePackPublishedFile;
      $(ConfigurePackModuleDependsOn)
    </ConfigurePackModuleDependsOn>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <Content>
      <!--
        This package tracks PowerShell files (.ps1, .psm1, ...) as Content
        items.  Copy them to the output and publish directories so that the
        file layout at F5 run approximates that of the installed module.
      -->
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>

      <!--
        This package configures the build to pack all published items.  To
        avoid duplicates, undo the pack-by-default 
      -->
      <Pack>false</Pack>
    </Content>
  </ItemDefinitionGroup>

  <ItemGroup>
    <!-- Prevent PowerShell files from being duplicated as None items -->
    <None Remove="$(PowerShellItemIncludes)"/>

    <!-- Nest generated .psd1 files under their templates -->
    <Content Update="**\*.psd1">
      <DependentUpon Condition="Exists('%(Identity).t')">%(Filename)%(Extension).t</DependentUpon>
    </Content>
  </ItemGroup>

  <!-- Trigger rebuild if generated .psd1 files are missing or outdated -->
  <Target Name="Psd1CollectUpToDateCheckBuiltDesignTime" BeforeTargets="CollectUpToDateCheckBuiltDesignTime" >
    <ItemGroup>
      <UpToDateCheckBuilt Include="%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)">
        <Original>%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)%(Psd1Template.Extension)</Original>
      </UpToDateCheckBuilt>
    </ItemGroup>
  </Target>

  <!-- Generate .psd1 files from the .psd1.t templates -->
  <Target Name="GeneratePsd1" BeforeTargets="AssignTargetPaths" Condition="'$(DesignTimeBuild)' != 'true'"
          Inputs="@(Psd1Template)" Outputs="@(Psd1Template->'%(RecursiveDir)%(Filename)')">
    <WriteLinesToFile
      File="%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)"
      Lines="$(
        [System.IO.File]::ReadAllText('%(Psd1Template.FullPath)')
          .Replace(`{VersionPrefix}`, $(VersionPrefix))
          .Replace(`{VersionSuffix}`, $(VersionSuffix))
          .Replace(`{Copyright}`,     $(Copyright))
      )"
      Overwrite="true"
    />
    <ItemGroup>
      <!-- Enlist generated file to be removed on next Clean. -->
      <FileWrites Include="%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)" />

      <!-- Add generated file as a Content item, so it gets copied to output. -->
      <Content Include="%(Psd1Template.RecursiveDir)%(Psd1Template.Filename)" Exclude="@(Content)">
        <DependentUpon>%(Psd1Template.Filename)%(Psd1Template.Extension)</DependentUpon>
      </Content>
    </ItemGroup>
  </Target>

  <Target Name="ConfigurePackModule" DependsOnTargets="$(ConfigurePackModuleDependsOn)" />

  <Target Name="ConfigurePackDepsFile" DependsOnTargets="PublishForPack"
          Condition="$([MSBuild]::VersionLessThan($(NETCoreSdkVersion), 5.0))">
    <ItemGroup>
      <_DepsFile Include="$(PublishDepsFilePath)"/>
    </ItemGroup>
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(_DepsFile)">
        <PackagePath></PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="ConfigurePackPublishedFile"
          DependsOnTargets="
            _ConfigurePackPublishedFilesNetCore;
            _ConfigurePackPublishedFilesSinceNet5
          ">
    <ItemGroup>
      <!-- Remove 'tools/all/any/' prefix (length 14) from package paths -->
      <TfmSpecificPackageFile Include="@(_ResolvedFileToPublishWithPackagePath)">
        <PackagePath>$([System.String]::Copy('%(_ResolvedFileToPublishWithPackagePath.PackagePath)').Substring(14))</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="_ConfigurePackPublishedFilesNetCore" DependsOnTargets="PublishForPack"
          Condition="$([MSBuild]::VersionLessThan($(NETCoreSdkVersion), 5.0))">
    <ResolveToolPackagePaths ResolvedFileToPublish="@(ResolvedFileToPublish)"
                             PublishDir="$(PublishDir)"
                             TargetFramework="all">
      <Output TaskParameter="ResolvedFileToPublishWithPackagePath"
              ItemName="_ResolvedFileToPublishWithPackagePath" />
    </ResolveToolPackagePaths>
  </Target>

  <Target Name="_ConfigurePackPublishedFilesSinceNet5" DependsOnTargets="PublishForPack"
          Condition="$([MSBuild]::VersionGreaterThanOrEquals($(NETCoreSdkVersion), 5.0))">
    <ResolveToolPackagePaths ResolvedFileToPublish="@(ResolvedFileToPublish)"
                             PublishDir="$(PublishDir)"
                             TargetFrameworkMoniker="all">
      <Output TaskParameter="ResolvedFileToPublishWithPackagePath"
              ItemName="_ResolvedFileToPublishWithPackagePath" />
    </ResolveToolPackagePaths>
  </Target>

  <!--
    NOTE: Broken when using Pack target and GeneratePackageOnBuild=true.
          Set GeneratePackageOnBuild=false or use Build target instead.
  -->
  <Target Name="PublishForPack"
          DependsOnTargets="_PublishForPackBuild;_PublishForPackNoBuild"
          Condition="'$(IsPublishable)' == 'true'">
    <Message Importance="High"
             Text="$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))" />
  </Target>

  <Target Name="_PublishForPackBuild"
          DependsOnTargets="_PublishBuildAlternative"
          Condition="'$(GeneratePackageOnBuild)' != 'true' And '$(NoBuild)' != 'true'" />

  <Target Name="_PublishForPackNoBuild"
          DependsOnTargets="$(_PublishNoBuildAlternativeDependsOn)"
          Condition="'$(GeneratePackageOnBuild)' == 'true' Or '$(NoBuild)' == 'true'" />

</Project>
