<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This project file is called in an external MSBuild instance to use proprty substitution -->

  <Import Project="$(RootParentProject)" />

  <!-- This is the file that is generated by the PowershellModule targets and has the generated properties used for substitution -->
  <Import Project="$(GeneratedPropertyImportFile)" />

  <UsingTask TaskName="ReplacePropertiesInFile" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Extension />
      <Properties ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true"/>
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
<![CDATA[
        string regex = @"(?<=[^\$@])\{(?<Property>[A-Za-z0-9]+)\}";
        if (Files.Length > 0)
        {
          // Transform the properties into a dictionary
          var properties = Properties.ToDictionary(prop => prop.GetMetadata("Name"), prop => prop.GetMetadata("Value"));

          Log.LogMessage(MessageImportance.Low, "Properties to use for replacement:");

          foreach(var prop in properties)
          {
            Log.LogMessage(MessageImportance.Low, $"\t{prop.Key} = {prop.Value}");
          }

          Result = new TaskItem[Files.Length];
          foreach (ITaskItem file in Files)
          {
            uint i = 0;
            string filePath = file.GetMetadata("FullPath");
            string rootDir = file.GetMetadata("RootDir");
            string recursiveDir = file.GetMetadata("Directory");
            string fileName = file.GetMetadata("Filename");
            string newFilePath = rootDir + recursiveDir + fileName + Extension;

            Log.LogMessage(MessageImportance.Low, $"Replacing MSBuild Properties in file: {filePath}");

            using (StreamReader reader = File.OpenText(filePath))
            {
              string newFileContents = Regex.Replace(
                reader.ReadToEnd(),
                regex,
                (match) => {
                  string propertyName = match.Groups["Property"].Value;
                  string propertyValue = properties.ContainsKey(propertyName) ? properties[propertyName] : string.Empty;
                  Log.LogMessage(MessageImportance.Low, $"Replacing property: Name<{propertyName}> Value<{propertyValue}>");
                  return propertyValue;
                }
              );

              Log.LogMessage(MessageImportance.Low, $"Writing replaced MSBuild properties to: {newFilePath}");

              using (StreamWriter writer = new StreamWriter(newFilePath))
              {
                writer.Write(newFileContents);
              }

              Result[i++] = new TaskItem(newFilePath);
            }
          }
        }
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GeneratePsd1File" Inputs="@(Psd1Template);@(Psd1Replacement)"
          Outputs="@(Psd1Template->'%(RootDir)%(Directory)%(Filename)')">
    
    <ReplacePropertiesInFile Files="@(Psd1Template)" Properties="@(Psd1Replacement)">
      <Output ItemName="GeneratedPsd1" TaskParameter="Result" />
    </ReplacePropertiesInFile>
  </Target>

</Project>
